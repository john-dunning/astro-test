---
import { metaTag, ogMetaTag, twitterMetaTag } from "@/utils/meta";

function createTags(
	data: MetadataProp,
	generator: (key: keyof typeof data, value: typeof data[typeof key]) => string,
	allowList: string[])
{
	return Object.entries(data)
		.filter(([key, value]) => allowList.includes(key) && value)
		.map(([key, value]) => generator(key, value))
		.join("\n\t") + "\n";
}

export type MetadataProp = Record<string, string | number>;

interface Props {
	meta: MetadataProp;
}

const BaseKeys = [
	"description"
];
const OGKeys = [
	"title",
	"description",
	"url",
	"image",
	"image:width",
	"image:height",
	"type",
];
const TwitterKeys = [
	"title",
	"description",
	"url",
	"image",
	"domain",
	"card",
];

const domain = new URL(Astro.site).hostname.split(".").slice(-2).join(".");
const { meta } = Astro.props;
const { meta: { url, image } } = Astro.props;
const ogData = {
	...meta,
		// make sure the image metadata is an absolute URL, not just a relative path,
	image: image && new URL(image as string, import.meta.env.SITE),
};
const twitterData = {
	domain,
	card: image ? "summary_large_image" : "summary",
	...meta,
	image: image && new URL(image as string, import.meta.env.SITE),
};

const tags = createTags(meta, metaTag, BaseKeys);
const ogTags = createTags(ogData, ogMetaTag, OGKeys);
const twitterTags = createTags(twitterData, twitterMetaTag, TwitterKeys);
---

<link rel="canonical" href={String(url)} />
	<Fragment set:html={tags} />
	<Fragment set:html={ogTags} />
	<Fragment set:html={twitterTags} />
